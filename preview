function autoBudget()
{
//Global variables
var alotBox = this.getField("alotBox");
var pdrBox = this.getField("pdrBox");
var exBox = this.getField("exBox");

var alotCheck = (alotBox.value === "Yes");
var pdrCheck = (pdrBox.value === "Yes");
var exCheck = (exBox.value === "Yes");

var resetFields = [lineItemGroup, subTotals, ssRates, suppServ, ssValues, grandTotals];

// getFields and objects for regular calculations and rates

var validator = this.getField("validator");

var lineItemsGroup = [
    { name: "inCash.", count: 12 },
    { name: "inMatch.", count: 12 },
    { name: "grantEx.", count: 20 },
    { name: "matchEx.", count: 20 }
    ];

var subTotals = [
    {"icTotal": 0 },
    {"imTotal": 0 },
    {"geTotal": 0 },
    {"meTotal": 0 }
    ];

var ssRates = {
    ten: alotCheck ? 0 : 0.10,     
    two: alotCheck ? 0 : 0.018,    
    tentwo: alotCheck ? 0 : 0.118
    };    

var suppServ = ["sscash", "ssmatch", "grantss.0", "grantss.1", "matchss.0", "matchss.1"];

var ssValues = {
    sscash: (subTotals["icTotal"].value * ssRates.tentwo),
    ssmatch: (subTotals["imTotal"].value * ssRates.tentwo),
    grantss0: (subTotals["geTotal"].value * ssRates.ten),
    grantss1: (subTotals["geTotal"].value * ssRates.two),
    matchss0: (subTotals["meTotal"].value * ssRates.ten),
    matchss1: (subTotals["meTotal"].value * ssRates.two)
};
function valuesHandler() 
{
    // Calculate each field value based on totals and rates
    lineItemsGroup.forEach(function(group) {
        var groupTotal = 0;
        for (var i = 0; i < group.count; i++) {
            var groupField = this.getField(group.name + i);
            
            // Check if the field exists
            if (!groupField) {
                console.warn("Field " + group.name + i + " not found.");
                continue;
            }

            var groupValue = parseFloat(groupField.value);
            if (isNaN(groupValue)) {
                groupValue = 0;  // Default to 0 if not a valid number
            }
            groupTotal += groupValue;
        }

        // Update subTotals
        var currentSubTotal = subTotals.find(item => group.name.includes(item.key.substring(0, 2)));
        if (currentSubTotal) {
            currentSubTotal.value = groupTotal;
        } else {
            console.error("Subtotal object for " + group.name + " not found.");
        }
    }, this);

    // Update supportive services field values
    suppServ.forEach(function(service) {
        var field = this.getField(fieldName);
        if (!field) {
            console.warn("Field " + fieldName + " not found.");
            return;
        }

        if (fieldName === "sscash") {
            field.value = ssValues.sscash;
        } else if (field === "ssmatch") {
            field.value = ssValues.ssmatch;
        } else if (field === "grantss") {
            field.value = grantss.index === 0 ? ssValues.grantss[0] : ssValues.grantss[1];
        } else if (field === "meTotal") {
            field.value = matchss.index === 0 ? ssValues.matchss[0] : ssValues.matchss[1];
        }
    }, this);

    // Update grand totals field values
    grandTotals.forEach(function(total) {
        var field = this.getField(total.fieldName);
        if (!field) {
            console.error("Field " + total.fieldName + " not found.");
            return;
        }
        field.value = total.value;
    }, this);
}
function checkHandler() {
    const boxGroup = 
    [
        { field: alotBox, value: Off },
        { field: pdrBox, value: Off },
        { field: exBox, value: Off }
    ]
	if (alotBox.value === "Yes") {
		currentBox = "alotBox";
		// Clear fields of other checkboxes
		pdrBox.value = "Off";  // Set the other checkboxes to "Off"
		exBox.value = "Off";  
	} else if (pdrBox.value === "Yes") {
		currentBox = "pdrBox";
		alotBox.value = "Off"; // Set the other checkboxes to "Off"
		exBox.value = "Off";  
	} else if (exBox.value === "Yes") {
		currentBox = "exBox";
		alotBox.value = "Off"; // Set the other checkboxes to "Off"
		pdrBox.value = "Off";  
	}
}
function boxHandler(){	
	// Set the action for each checkbox
	alotBox.setAction("Mouse Up", checkHandler);
	pdrBox.setAction("Mouse Up", checkHandler);
	exBox.setAction("Mouse Up", checkHandler);
    boxGroup.setAction("Mouse Up")
    {
        if (alotBox.value === "Yes")
        { 
            pdrBox.value = Off;
            exBox.value = Off;
        }
        else if (pdrBox.value === "Yes")
        {
            alotBox.value = Off;
            exBox.value = Off;
        }
        else if (exBox.value === "Yes")
        {
            alotBox.value = Off;
            pdrBox.value = Off;
        }
    }
	if (alotCheck) {
        const alot = ["alotDesc", "alotValue", "alotForm", "alotCost", "alotUnit", "alotQuant", "alotQual", "alotInput", "unitInput", "quantInput", "qualInput"];
                
        alot.forEach(function(fieldName, index) 
        {
            var field = this.getField(fieldName); 
            field.display = display.visible; 
            if (index === 1 && field.value !=="")
            {
                this.getField("icTotal").value = alotValue.value;
            }
            if ( index > 6 && field.value !== "")
            {
                var alotResult = this.getField("alotResult");
                alotResult.display = display.visible;
                alotResult.value = alotInput + " " + unitInput + " " + quantInput + " " + qualInput;
            }
            for (var i = 0; i < 20; i++) 
                {
                var grantEx = this.getField("grantEx." + i);
                grantEx.display = alotCheck ? display.visible : display.hidden;
                }
        }, this);
    }
    if (pdrCheck) {
        var pdrFields = ["pdrCost.0", "pdrCost.1", "pdrUnit.0", "pdrUnit.1", "pdrDays.0", "pdrDays.1"];
        var pdrValue = {costpd: 0, unitpd: 0, dayspd: 0};
        var pdrInputs = ["pdrCost.1", "pdrUnit.1", "pdrDays.1"];
		const grantEx = ["grantEx."];
        pdrFields.forEach(function(fieldName){
			var field = this.getField(fieldName);
			if (field){
				field.display = pdrCheck ? display.visible : display.hidden;
				this.getField("other2").value = "Per Diem Total:";
				this.getField("inCash.11").value = pdrTotal;
			}
		}, this)};
		pdrInputs.forEach(function(fieldName){
			var field = this.getField(fieldName);
			field[0].value = pdrValue.costpd;
			field[1].value = pdrValue.unitpd;
			field[2].value = pdrValue.dayspd;
		}, this);
        grantEx.forEach(function(fieldName) {
			var field = this.getField(fieldName + i);
			field.display = pdrCheck ? display.visible : display.hidden;;
		}, this);
        if (!isNaN(costpd) && !isNaN(unitpd) && !isNaN(dayspd)) {
			pdrTotal = (costpd * unitpd * dayspd);
			this.getField("perdiemtext").value = "Per Diem Total: $" + pdrTotal.toFixed(2) + "\n\nPlease enter the projected expenditures to be covered under these funds for this base/option year.";
            for (var i = 0; i < 20; i++) {
                var gpdBox = this.getField("grantperdiem." + i);
                var gpdCheck = (gpdBox.value === "Yes");
                var grantex = this.getField("grantexpend." + i);
                var grantexCheck = parseFloat(grantex.value) || 0;

                if (gpdCheck && !isNaN(grantexCheck)) {
                    total += grantexCheck;
                }
            }
            this.getField("grantexpendtotal").value = total;
        }
    }    
    if (exCheck) {
        lineItemsGroup[inCash].forEach(fieldName, index);
            var field = this.getField(fieldName);
            field.value = "FEMA funding"
		}
		this.getfield("sscash").value = 0;
	} 
	function runValues(){                          
        if (!alotCheck && !pdrCheck) {
            totalsGroup.forEach(function(group, index) {
                var groupTotal = 0;
                for ( var j = 0; j < group.count ; j++) {
                    var groupField = this.getField(group.name + j );
                    var groupValue = parseFloat(groupField.value) || 0;
                    groupTotal += groupValue;
				}
            this.getField(subTotals.fieldName + index ).value = groupTotal;
			},this);
		}
	}
function salaryCalculator (){
    var staffTotal = this.getField("staffTotal");
    var grantexpend0 = this.getField("grantexpend.0");
    var matchexpend0 = this.getField("matchexpend.1");
    var salaryCalculator = this.getField("salaryCalculator");
    var staffTotal = this.getfield("staffTotal");
    var question = this.getField("ques.");
    var staffFields = ["title.", "nex.", "ftpt.", "percent.", "fringe.", "salary.", "result."];

    var on = "Staff salaries detected. Salary Calculator is ON. Please enter the number of staff covered under this grant in the box to the right."
    var off = "No staff salaries detected. Salary Calculator is OFF."
    
    
    if ( grantexpend0.value !== "" || matchexpend0.value !== "") 
    {
        salaryCalculator.value = on;
        salaryCalculator.fillColor = fillColor.green;
        for ( var i = 0; i < 5; i++ )
        {
            if ( salaryCalculator.value = on ) {
                question[i].display = display.visible;
            } else {
                question[i].display = display.hidden;
            }
        }
		for (var i = 0; i < staffFields.length; i++) {
			for (var j = 0; j < 3; j++) {
				var fieldName = staffFields[i] + "." + j;
				var field = this.getField(fieldName);
				if (parseInt(staffTotal) > 0 && parseInt(staffTotal) <= 3) {
					if (j < parseInt(staffTotal)) {
                        field.display = display.visible; // Show the field
					} else {
                        field.display = display.hidden;  // Hide the field
					}    
                } else (parseInt(staffTotal.value) == 4)
			}
		}
	app.alert 
                ({
                    cMsg: "For contracts that cover more than three (3) salaries, please attach the salary information in a separate document.",
                    nIco: 3,
                    cTitle: "Four or more staff salaries detected!"
                });
            }
            
    // Hide all fields if staffTotal  is hidden or invalid
    if (staffTotal  === 0 || staffTotal  === "" || staffTotal  === null) 
    {
        for (var j = 0; j < staffFields.length; j++) 
        {
            for (var i = 0; i < 3; i++) 
            {
                var fieldName = staffFields[j] + "." + i;
                var field = this.getField(fieldName);
                field.display = display.hidden;  // Hide all fields
            }
        }
    
      }
    else 
    {
        salaryCalculator.value = off;
        salaryCalculator.fillColor = fillColor.white;
    }
}
boxHandler();
valuesHandler();
runValues();
validator();
salaryCalculator();

